/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
export class NgxBraintreeService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} clientTokenURL
     * @return {?}
     */
    getClientToken(clientTokenURL) {
        return this.http
            .get(clientTokenURL, { responseType: 'json' })
            .pipe(map((response) => { return response.token; }), catchError((error) => { return Observable.throw(error); }));
    }
    /**
     * @param {?} createPurchaseURL
     * @param {?} nonce
     * @param {?} chargeAmount
     * @return {?}
     */
    createPurchase(createPurchaseURL, nonce, chargeAmount) {
        const /** @type {?} */ headers = new HttpHeaders({ 'Content-Type': 'application/json' });
        return this.http
            .post(createPurchaseURL, { nonce: nonce, chargeAmount: chargeAmount }, { 'headers': headers })
            .pipe(map((response) => {
            return response;
        }));
    }
}
NgxBraintreeService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgxBraintreeService.ctorParameters = () => [
    { type: HttpClient, },
];
function NgxBraintreeService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxBraintreeService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxBraintreeService.ctorParameters;
    /** @type {?} */
    NgxBraintreeService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJyYWludHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWJyYWludHJlZS8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtYnJhaW50cmVlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHakQsTUFBTTs7OztJQUVKLFlBQW9CLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7S0FBSzs7Ozs7SUFFekMsY0FBYyxDQUFDLGNBQXNCO1FBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSTthQUNiLEdBQUcsQ0FBQyxjQUFjLEVBQUUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDN0MsSUFBSSxDQUNILEdBQUcsQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQ2xELFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQzNELENBQUM7S0FDTDs7Ozs7OztJQUVELGNBQWMsQ0FBQyxpQkFBeUIsRUFBRSxLQUFhLEVBQUUsWUFBb0I7UUFDM0UsdUJBQU0sT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUk7YUFDYixJQUFJLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQzthQUM3RixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUU7WUFDMUIsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUNqQixDQUFDLENBQUMsQ0FBQztLQUNQOzs7WUFyQkYsVUFBVTs7OztZQUpGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE5neEJyYWludHJlZVNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxyXG5cclxuICBnZXRDbGllbnRUb2tlbihjbGllbnRUb2tlblVSTDogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBcclxuICAgICAgLmdldChjbGllbnRUb2tlblVSTCwgeyByZXNwb25zZVR5cGU6ICdqc29uJyB9KVxyXG4gICAgICAucGlwZShcclxuICAgICAgICBtYXAoKHJlc3BvbnNlOiBhbnkpID0+IHsgcmV0dXJuIHJlc3BvbnNlLnRva2VuOyB9KSxcclxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT4geyByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvcik7IH0pXHJcbiAgICAgICk7XHJcbiAgfVxyXG5cclxuICBjcmVhdGVQdXJjaGFzZShjcmVhdGVQdXJjaGFzZVVSTDogc3RyaW5nLCBub25jZTogc3RyaW5nLCBjaGFyZ2VBbW91bnQ6IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9KTtcclxuICAgIHJldHVybiB0aGlzLmh0dHBcclxuICAgICAgLnBvc3QoY3JlYXRlUHVyY2hhc2VVUkwsIHsgbm9uY2U6IG5vbmNlLCBjaGFyZ2VBbW91bnQ6IGNoYXJnZUFtb3VudCB9LCB7ICdoZWFkZXJzJzogaGVhZGVycyB9KVxyXG4gICAgICAucGlwZShtYXAoKHJlc3BvbnNlOiBhbnkpID0+IHtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICAgIH0pKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==