/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Renderer2, ElementRef } from '@angular/core';
import { NgxBraintreeComponent } from './ngx-braintree.component';
var NgxBraintreePayDirective = /** @class */ (function () {
    function NgxBraintreePayDirective(elementRef, renderer, ngxBtComponent) {
        var _this = this;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.ngxBtComponent = ngxBtComponent;
        // Disable the pay button initially. This will be enabled after the user fills the dropin information.
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', true);
        // Subscribe the payButtonStatus event to enable disable the pay button
        this.ngxBtComponent
            .payButtonStatus
            .subscribe(function (status) {
            _this.renderer.setProperty(_this.elementRef.nativeElement, 'disabled', !status);
        });
        // Handle click event for the pay button
        this.renderer.listen(this.elementRef.nativeElement, 'click', function (event) {
            _this.ngxBtComponent.pay();
        });
    }
    /**
     * @return {?}
     */
    NgxBraintreePayDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // Set the text on the button to the buttonText property that was sent.
        // this.renderer.setProperty(this.elementRef.nativeElement, 'innerText', this.ngxBtComponent.buttonText);
    };
    /**
     * @return {?}
     */
    NgxBraintreePayDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    NgxBraintreePayDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxPay]'
                },] },
    ];
    /** @nocollapse */
    NgxBraintreePayDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: NgxBraintreeComponent, },
    ]; };
    return NgxBraintreePayDirective;
}());
export { NgxBraintreePayDirective };
function NgxBraintreePayDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxBraintreePayDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxBraintreePayDirective.ctorParameters;
    /** @type {?} */
    NgxBraintreePayDirective.prototype.elementRef;
    /** @type {?} */
    NgxBraintreePayDirective.prototype.renderer;
    /** @type {?} */
    NgxBraintreePayDirective.prototype.ngxBtComponent;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJyYWludHJlZS1wYXkuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWJyYWludHJlZS8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtYnJhaW50cmVlLXBheS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXFCLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0lBU2hFLGtDQUNVLFlBQ0EsVUFDQTtRQUhWLGlCQW1CQztRQWxCUyxlQUFVLEdBQVYsVUFBVTtRQUNWLGFBQVEsR0FBUixRQUFRO1FBQ1IsbUJBQWMsR0FBZCxjQUFjOztRQUd0QixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7O1FBRzNFLElBQUksQ0FBQyxjQUFjO2FBQ2hCLGVBQWU7YUFDZixTQUFTLENBQUMsVUFBQyxNQUFlO1lBQ3pCLEtBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQy9FLENBQUMsQ0FBQzs7UUFHTCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxPQUFPLEVBQUUsVUFBQyxLQUFLO1lBQ2pFLEtBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDM0IsQ0FBQyxDQUFDO0tBQ0o7Ozs7SUFFRCwyQ0FBUTs7O0lBQVI7OztLQUdDOzs7O0lBRUQsOENBQVc7OztJQUFYO0tBQ0M7O2dCQWxDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFVBQVU7aUJBQ3JCOzs7O2dCQUxpRCxVQUFVO2dCQUFyQixTQUFTO2dCQUN2QyxxQkFBcUI7O21DQUQ5Qjs7U0FNYSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE9uSW5pdCwgT25EZXN0cm95LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4QnJhaW50cmVlQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtYnJhaW50cmVlLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tuZ3hQYXldJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4QnJhaW50cmVlUGF5RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuXHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgcHJpdmF0ZSBuZ3hCdENvbXBvbmVudDogTmd4QnJhaW50cmVlQ29tcG9uZW50KSB7XHJcblxyXG4gICAgLy8gRGlzYWJsZSB0aGUgcGF5IGJ1dHRvbiBpbml0aWFsbHkuIFRoaXMgd2lsbCBiZSBlbmFibGVkIGFmdGVyIHRoZSB1c2VyIGZpbGxzIHRoZSBkcm9waW4gaW5mb3JtYXRpb24uXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCB0cnVlKTtcclxuXHJcbiAgICAvLyBTdWJzY3JpYmUgdGhlIHBheUJ1dHRvblN0YXR1cyBldmVudCB0byBlbmFibGUgZGlzYWJsZSB0aGUgcGF5IGJ1dHRvblxyXG4gICAgdGhpcy5uZ3hCdENvbXBvbmVudFxyXG4gICAgICAucGF5QnV0dG9uU3RhdHVzXHJcbiAgICAgIC5zdWJzY3JpYmUoKHN0YXR1czogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdkaXNhYmxlZCcsICFzdGF0dXMpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAvLyBIYW5kbGUgY2xpY2sgZXZlbnQgZm9yIHRoZSBwYXkgYnV0dG9uXHJcbiAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMubmd4QnRDb21wb25lbnQucGF5KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgLy8gU2V0IHRoZSB0ZXh0IG9uIHRoZSBidXR0b24gdG8gdGhlIGJ1dHRvblRleHQgcHJvcGVydHkgdGhhdCB3YXMgc2VudC4gXHJcbiAgICAvLyB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnaW5uZXJUZXh0JywgdGhpcy5uZ3hCdENvbXBvbmVudC5idXR0b25UZXh0KTtcclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gIH1cclxuXHJcbn1cclxuIl19