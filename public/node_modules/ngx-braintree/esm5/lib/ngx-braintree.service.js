/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
var NgxBraintreeService = /** @class */ (function () {
    function NgxBraintreeService(http) {
        this.http = http;
    }
    /**
     * @param {?} clientTokenURL
     * @return {?}
     */
    NgxBraintreeService.prototype.getClientToken = /**
     * @param {?} clientTokenURL
     * @return {?}
     */
    function (clientTokenURL) {
        return this.http
            .get(clientTokenURL, { responseType: 'json' })
            .pipe(map(function (response) { return response.token; }), catchError(function (error) { return Observable.throw(error); }));
    };
    /**
     * @param {?} createPurchaseURL
     * @param {?} nonce
     * @param {?} chargeAmount
     * @return {?}
     */
    NgxBraintreeService.prototype.createPurchase = /**
     * @param {?} createPurchaseURL
     * @param {?} nonce
     * @param {?} chargeAmount
     * @return {?}
     */
    function (createPurchaseURL, nonce, chargeAmount) {
        var /** @type {?} */ headers = new HttpHeaders({ 'Content-Type': 'application/json' });
        return this.http
            .post(createPurchaseURL, { nonce: nonce, chargeAmount: chargeAmount }, { 'headers': headers })
            .pipe(map(function (response) {
            return response;
        }));
    };
    NgxBraintreeService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NgxBraintreeService.ctorParameters = function () { return [
        { type: HttpClient, },
    ]; };
    return NgxBraintreeService;
}());
export { NgxBraintreeService };
function NgxBraintreeService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxBraintreeService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxBraintreeService.ctorParameters;
    /** @type {?} */
    NgxBraintreeService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWJyYWludHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWJyYWludHJlZS8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtYnJhaW50cmVlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0lBSy9DLDZCQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0tBQUs7Ozs7O0lBRXpDLDRDQUFjOzs7O0lBQWQsVUFBZSxjQUFzQjtRQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQUMsY0FBYyxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDO2FBQzdDLElBQUksQ0FDSCxHQUFHLENBQUMsVUFBQyxRQUFhLElBQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQ2xELFVBQVUsQ0FBQyxVQUFDLEtBQUssSUFBTyxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDM0QsQ0FBQztLQUNMOzs7Ozs7O0lBRUQsNENBQWM7Ozs7OztJQUFkLFVBQWUsaUJBQXlCLEVBQUUsS0FBYSxFQUFFLFlBQW9CO1FBQzNFLHFCQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7UUFDeEUsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJO2FBQ2IsSUFBSSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUM7YUFDN0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLFFBQWE7WUFDdEIsTUFBTSxDQUFDLFFBQVEsQ0FBQztTQUNqQixDQUFDLENBQUMsQ0FBQztLQUNQOztnQkFyQkYsVUFBVTs7OztnQkFKRixVQUFVOzs4QkFEbkI7O1NBTWEsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOZ3hCcmFpbnRyZWVTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cclxuXHJcbiAgZ2V0Q2xpZW50VG9rZW4oY2xpZW50VG9rZW5VUkw6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwXHJcbiAgICAgIC5nZXQoY2xpZW50VG9rZW5VUkwsIHsgcmVzcG9uc2VUeXBlOiAnanNvbicgfSlcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgbWFwKChyZXNwb25zZTogYW55KSA9PiB7IHJldHVybiByZXNwb25zZS50b2tlbjsgfSksXHJcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHsgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IpOyB9KVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUHVyY2hhc2UoY3JlYXRlUHVyY2hhc2VVUkw6IHN0cmluZywgbm9uY2U6IHN0cmluZywgY2hhcmdlQW1vdW50OiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwXHJcbiAgICAgIC5wb3N0KGNyZWF0ZVB1cmNoYXNlVVJMLCB7IG5vbmNlOiBub25jZSwgY2hhcmdlQW1vdW50OiBjaGFyZ2VBbW91bnQgfSwgeyAnaGVhZGVycyc6IGhlYWRlcnMgfSlcclxuICAgICAgLnBpcGUobWFwKChyZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xyXG4gICAgICB9KSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=